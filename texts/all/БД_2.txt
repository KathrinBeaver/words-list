2. ОРГАНИЗАЦИЯ ДАННЫХ В ВИДЕ ТАБЛИЦ
2.1. Порядок создания и модификации структуры таблиц
2.1.1. Создание таблиц и задание типов полей
Рассмотрим основные принципы работы с таблицами базы данных (БД) в режиме конструктора путем создания, занесения и изменения данных.
База данных, как правило, состоит нескольких таблиц. Таблица представляет собой набор данных, упорядоченных в виде строк и столбцов. 
          Основные приемы работы с таблицами рассмотрим на примере демонстрационной базы данных регистратуры лечебного учреждения, в составе которой имеются три таблицы. Первая представляет данные о врачах, вторая – данные о пациентах, третья – об учете посещения больными врачей. Структура БД получена на этапе логического проектирования, результатом   которого является совокупность соотношений в третьей нормальной форме (3НФ). Для рассматриваемого примера нормализованным отношениям соответствуют таблицы DoctorTab, PacientTab и VisitTab. 
Данные о врачах (DoctorTab ):
	ID_doc – уникальный идентификатор врача
	NameDc – Имя доктора
	PatrDc – Отчество доктора
	SurnDc – Фамилия доктора
	SpecDc – Специализация врача
	Exper – Стаж работы (полных лет)
	Status – Совместитель/Штатный (Да/нет)
Данные о пациентах (PacientTab ):
Id_pat – уникальный идентификатор пациента
NamePt – Имя пациента
PartPt – Отчество пациента
SurnPt – Фамилия пациента
AddressPt – Адрес пациента 
TelephonePt – телефон пациента 
GroupB – Группа крови
GroupRisk – Группа риска
Данные о посещении врачей пациентами (VisitTab ):
ID_doc – уникальный идентификатор врача
ID_pat – уникальный идентификатор пациента
DataVisit – Дата посещения
Complaint – жалоба больного
	Для создания БД RegistryBD в СУБД Access выполните следующие действия:
1.	Запустите программу Access.
2.	На панели задач Создание файла (New) щелкните на ссылке Новая база данных (Blank Database) (рис. 2.1).
 
  Рис. 2.1.  Состав опций меню Создание файла
3.	В диалоговом окне Файл новой базы данных сохраните новую базу данных под именем RegistryBD, предварительно убедившись, что вы находитесь в правильном каталоге.
4.	 В Меню «RegistryBD: база данных» в списке, расположенном в правой части окна, можно выбрать способ задания таблицы: Создание таблицы в режиме конструктора, Создание таблицы с помощью мастера, Создание таблицы путем ввода данных. Выберите пункт Создание таблицы в режиме конструктора (Create table in Design View) и щелкните на кнопке Создать (New) панели инструментов 
(рис. 2.2).
 
Рис. 2.2. Создание таблицы
5.	В списке режимов диалогового окна Новая таблица (New Table) выберите элемент Конструктор (Design View) и щелкните на кнопке Ок. Откроется окно таблицы в режиме конструктора (рис. 2.3), которое предназначено для описания атрибутов полей таблицы и правил работы с данными этих полей
	В столбце Имя поля и введите уникальное имя поля.
В столбце Тип данных можно оставить настройку по умолчанию (Текстовый) или выбрать из раскрывающегося списка ячейки столбца Тип данных другой тип данных.
 
				Рис. 2.3.  Окно конструктора таблиц
В приведенном ниже списке указаны все типы данных полей, поддерживаемые в Microsoft Access.
•	Текстовый 
Текст или комбинация текста и чисел (например, адреса), а также числа, не требующие вычислений, например, номера телефонов, инвентарные номера или почтовые индексы. 
Сохраняет до 255 знаков. Свойство Размер поля (FieldSize) определяет максимальное количество знаков, которые можно ввести в поле. 
•	Поле МЕМО 
Длинный текст или числа, например, примечания или описания. 
Сохраняет до 65 536 знаков. 
•	Числовой 
Данные, используемые для математических вычислений, за исключением финансовых расчетов (для них следует использовать тип «Денежный»). 
Сохраняет 1, 2, 4 или 8 байтов; 16 байтов для кодов репликации (GUID). Конкретный тип числового поля определяется значением свойства Размер поля (FieldSize). 
•	Дата/время 
Значения дат и времени. 
Сохраняет 8 байтов. 
•	Денежный 
Используется для денежных значений и для предотвращения округления во время вычислений. 
Сохраняет 8 байтов. 
•	Счетчик 
Автоматическая вставка уникальных последовательных (увеличивающихся на 1) или случайных чисел при добавлении записи. 
Сохраняет 4 байта; 16 байтов для кодов репликации (GUID). 
•	Логический 
Данные, принимающие только одно из двух возможных значений, таких как «Да/Нет», «Истина/Ложь», «Вкл/Выкл». Значения Null не допускаются. 
Сохраняет 1 бит.
•	Поле объекта OLE 
Объекты OLE (такие как документы Microsoft Word, электронные таблицы Microsoft Excel, рисунки, звукозапись или другие данные в двоичном формате), созданные в других программах, использующих протокол OLE. 
Сохраняет до 1 Гигабайта (ограничивается объемом диска). 
•	Гиперссылка 
Гиперссылки. Гиперссылка может иметь вид пути URC либо адреса URL. Сохраняет до 64 000 знаков.
 Мастер подстановок 
Создает поле, позволяющее выбрать значение из другой таблицы или из списка значений, используя поле со списком. При выборе данного параметра в списке типов данных запускается мастер для автоматического определения этого поля.  Для сохранения требуется тот же размер, что и у первичного ключа, соответствующего полю подстановок, — обычно 4 байта. 
В столбце Описание введите лаконичное описание данных, которые будет содержать это поле. Текст описания будет выводиться в строке состояния при добавлении данных в поле, а также будет включен в описание объекта таблицы. Вводить описание не обязательно. 
2.1.2. Свойства полей
В блоке Свойства поля указываются атрибуты связанные с режимом ввода данных поля (рис. 2.4).
 
Рис. 2.4. Свойства поля
•	Свойство Размер поля (FieldSize) определяет максимальный размер данных, которые могут сохраняться в полях с типом данных Текстовый, Числовой или Счетчик.
•	Свойство Формат поля (Format) указывает форматы вывода текста, чисел, дат и значений времени на экран и на печать.
В полях с типом данных Текстовый и Поле МЕМО для задания форматов используются четыре символа, приведенные в таблице 2.1:
Таблица 2.1
Символы для задания форматов
Символ	Описание
@	Обязательный текстовый символ или пробел
&	Необязательный текстовый символ
>	Преобразует все символы в прописные
<	Преобразует все символы в строчные

Например, если свойству Формат поля присвоено значение (@@@)@@@-@@@@, то при вводе 2035551234 данные будут отображены в виде (203)555-1234.
Для полей с типами данных Числовой и Денежный можно выбрать любой из стандартных форматов (табл. 2.2) или создать свой собственный формат.
Таблица 2.2.
Примеры  форматов полей с типом данных Числовой
Тип формата	Введенное число	Отображаемое число	Формат
Основной	987654,321	987654,321	######,###
Денежный	987654,321	987 654,32р.	### ##0,00р.
Фиксированный	987654,321	987654,32	######,##
С разделителями разрядов	987654,321	987 654,32	### ##,##
Процентный	,987	98,7%	###,##%

Продолжение табл. 2.2
Тип формата	Введенное число	Отображаемое число	Формат
Экспоненциальный	987654,321	9,88Е+05	#,##E+00
Евро	987654,321	987 654, 32€	### ###,##€
Числовые пользовательские форматы состоят из четырех частей: (1) для положительных чисел, (2) для отрицательных чисел, (3) для нулевых значений и (4) для значений Null. Можно назначить для каждой части определенный цвет для отображения соответствующих значений. Например,  можно создать пользовательский формат для поля с типом данных Денежный, который будет выглядеть подобно следующему: 
$# ##0,00 [Зеленый]; ($# ##0,00) [Красный]; ”нуль”;”Пусто”.
Для форматов полей с типом данных Дата/время существует семь стандартных форматов (табл. 2.3), также можно использовать определенные пользователем установки даты и времени, включая приведенные в таблице 2.4.
Таблица 2.3
Стандартные форматы для полей с типом данных Дата/время
Формат	Пример
Полный формат даты	10.2.01 и 22:32:15
Длинный формат даты	10 февраля 2001г.
Средний формат даты	10-фев-01
Краткий формат даты	10.2.01
Длинный формат времени	22:32:15
Средний формат времени	10:32
Краткий формат времени	22:32
Таблица 2.4
Символы, используемые для определения пользователем 
установок даты и времени
Обозначение	Описание
: (двоеточие)	Разделитель компонентов времени
. (точка) или / (косая черта)	Разделитель компонентов даты
C	Определяет встроенный формат Полный формат даты
d	Номер дня месяца, состоящий из одной или двух цифр (1-31)
dd	Номер дня месяца, состоящий из двух цифр (01-31)
ddd	Сокращенное название дня недели (Пн-Вс)
dddd	Полное название дня недели (понедельник-воскресение)
ddddd	Определяет встроенный Краткий формат даты
dddddd	Определяет встроенный Длинный формат даты
w	Номер дня недели (1-7)
ww	Номер недели в году (1-53)
m	Номер месяца, состоящий из одной или двух цифр (1-12)
mm	Номер месяца, состоящий из двух цифр (01-12)
mmm	Первые три буквы названия месяца (янв-дек)
mmmm	Полное название месяца (январь-декабрь)
q	Номер квартала в годе (1-4)
y	Номер дня в годе (1-366)
yy	Последние две цифры номера года (01-99)
yyyy	Полный номер года (0000-9999)
Продолжение табл. 2.4
Обозначение	Описание
h	Количество часов, состоящее из одной или двух цифр (0-23)
hh	Количество часов, состоящее из двух цифр (00-23)
n	Количество минут, состоящее из одной или двух цифр (0-59)
nn	Количество минут, состоящее из двух цифр (00-59)
s	Количество секунд, состоящее из одной или двух цифр (0-59)
Ss	Количество секунд, состоящее из двух цифр (00-59)
Ttttt	Определяет встроенный Длинный формат времени
AM/PM	12-часовой формат времени с добавлением прописных букв AM или PM
am/pm	12-часовой формат времени с добавлением строчных букв am или pm
A/P	12-часовой формат времени с добавлением прописной буквы A или P
a/p	12-часовой формат времени с добавлением строчной буквы a или p
AMPM	12-часовой формат времени
Данные в полях с типом Логический Access сохраняет не так, как обычно это принято: для логического Да сохраняется значение -1, тогда как для логического Нет – значение 0. С помощью форматов представление данных в полях можно сделать более наглядными.   
Существует три стандартных значения формата для полей логического типа (табл. 2.5).

Таблица 2.5
Стандартные значения формата для полей типа Логический
Формат	Описание
Да/Нет	Установлено по умолчанию. Отображает -1 как Да и 0 – как Нет
Истина/Ложь	Отображает значение -1 как Истина и 0 – как Ложь
Вкл/Выкл	Отображает -1 для значения Вкл и 0 – для значения Выкл
•	  Свойство Маска ввода (InputMask) облегчает ввод данных и определяет значения, которые можно ввести в элемент управления поле. Задание шаблонов ввода данных в требуемое поле можно выполнить с помощью мастера (рис. 2.5).
 
Рис. 2.5. Создание Масок ввода
Ниже перечислены некоторые специальные символы, используемые для задания шаблонов (табл. 2.6):
Таблица 2.6
Символы задания шаблонов для маски ввода
Символ	Описание
0	Цифра (0-9, обязательный знак; знаки (+) и (-) не разрешены
9	Цифра или пробел (необязательный знак; знаки (+) и (-) не разрешены
#	Цифра или пробел (необязательный знак; незаполненные позиции)
L	Буква (от А до Я, обязательный знак)
?	Буква (от А до Я, необязательный знак)
A	Буква или цифра (обязательный знак)
a	Буква или цифра (необязательный знак)
&	Любой знак или пробел (обязательный знак)
С	Любой знак или пробел (необязательный знак)
.,:;-/	Десятичный разделитель, разделители групп разрядов, времени и даты.
<	Преобразует все знаки к нижнему регистру
>	Преобразует все знаки к нижнему регистру
!	Указывает заполнение маски ввода справа налево, а не слева направо
       Например, маска для телефона (999)000-0000 задается следующим образом: !(999)000-0000;0;” “. Первая часть маски задает саму маску ввода (! (999)000-0000), восклицательный знак указывает, что маска ввода заполняется справа налево, этот символ следует использовать, если в левой части есть позиции, заполнять которые необязательно. Во второй части указывается, должны ли сохраняться промежуточные символы в таблице (0 – сохраняются, 1 или пустое значение – сохраняются только символы введенные пользователем). В третьей части указывается символ, который будет использоваться вместо пробелов в данной маске ввода.
•	Свойство Подпись (Caption) определяет текст, который выводится в подписях объектов в различных режимах.
•	Свойство Значение по умолчанию (DefaultValue) определяет текст или выражение, которое автоматически вводится в элемент управления или поле при создании новой записи. 
•	Свойство Условие на значение (ValidationRule) определяет требования к данным, вводящимся в запись, в поле или в элемент управления. Условия представляются в виде выражений, задаваемых с помощью построителя (рис. 2.6).
 
Рис. 2.6. Окно построителя выражений
      При определении допустимого диапазона значений в свойстве Условие на значение можно использовать значение функции Date для данных типа Дата/время. До и после дат в выражениях ставятся символы #. Например, если требуется ограничить ввод данных значениям между 1 января 1970 года и 31 декабря 2001 года, то необходимо ввести  выражение Between #1.1.70# and #31.12.01#. Если, например, присутствует поле Пол, то ввод в него можно ограничить двумя значениями М – для мужской и Ж – для женский. Выражение для проверки значения в этом случае выглядит так: InStr(“МЖ”; [Пол])>0.
•	Сообщение об ошибке (ValidationText) позволяет указать текст сообщения, выводящегося на экран, если введенные данные нарушают условие, определенное в свойстве Условие на значение (ValidationRule).
•	Свойство Обязательное поле (Required) указывает, требует ли поле обязательного ввода значения. Если это свойство имеет значение «Да», то при вводе новой записи необходимо ввести значение в это поле или в любой присоединенный к нему элемент управления. Пустые (Null) значения в этом поле не допускаются. Например, можно потребовать, чтобы в элементе управления «Фамилия» в каждой записи обязательно выводилась какая-либо фамилия. Чтобы позволить ввод в поле значений Null, недостаточно указать для свойства Обязательное поле (Required) значение «Нет». Если определено свойство Условие на значение (ValidationRule), оно должно иметь вид условие На Значение Or Is Null.
•	Свойство Пустые строки (AllowZeroLength) определяет, допускается ли ввод в поле пустых строк ("").
•	Свойство Индексированное поле (Indexed) определяет индекс, задаваемый по одному полю. Индекс ускоряет выполнение запросов, в которых используются индексированные поля и операции сортировки и группировки. Например, если часто выполняется поиск по полю «Фамилия» в таблице «Сотрудники», следует создать индекс для этого поля.
•	Свойство Сжатие Юникод (UnicodeCompression) для полей типа «Текстовый», «Поле MEMO» и «Гиперссылка» по умолчанию получает значение Да. Когда свойство Сжатие Юникод (UnicodeCompression) поля имеет значение Да, все знаки, первый байт которых равен 0, будут сжиматься при сохранении и восстанавливаться при выборке. Так как первым байтом латинских букв — букв таких западноевропейских языков как английский, испанский или немецкий — является 0, то кодировка Юникод при включенном сжатии не накладывает дополнительных требований к объему дискового пространства, необходимого для хранения в полях данных, состоящих только из латинских букв.
•	Свойство Режим IME (IMEMode) позволяет задать режим преобразования канджи для элемента управления при получении им фокуса.
•	Свойство «Режим предложений IME» (IMESentenceMode) определяет переключение режима предложений IME для полей в таблице или элементов управления в форме при перемещении фокуса.
Для каждой из таблиц БД DoctorTab, PatientTab и VisitTab 
(табл. 2.7, 2.8, 2.9) ниже приведены размеры полей и типы присвоенных им данных:
Таблица 2.7
Структура таблицы DoctorTab
Имя поля	Тип данных	Размер поля	Ключевое поле	Маска
ввода	Условие
Id_doc	Текстовый	5	#		
namedc	Текстовый	20			
patrdc	Текстовый	25			
surndc	Текстовый	25			
specdc	Текстовый	25			
exper	Числовой	3			>= 0
status	Логический	1			

Результат описания структуры таблицы DoctorTab представлен в окне Конструктор таблиц (рис. 2.7).
 
Рис. 2.7. Таблица DoctorTab в режиме конструктора
Таблицы PatientTab и VisitTab необходимо создать самостоятельно с использованием представленных ниже описаний полей:
Таблица 2.8
Структура таблицы PatientTab
Имя поля	Тип данных	Размер поля	Ключевое поле	Маска 
ввода	Условие
Id_pat	Текстовый	5	#		
namept	Текстовый	20			
partpt	Текстовый	25			
surnpt	Текстовый	25			
addresspt	Текстовый	50			
Продолжение табл. 2.8
Имя поля	Тип данных	Размер поля	Ключевое поле	Маска 
ввода	Условие
telephonept	Текстовый	8		___-__-__	
GroupB	Числовой	2			1, 2, 3, 4
GroupRisk	Текстовый	20			
Таблица 2.9
Структура таблицы VisitTab
Имя поля	Тип данных	Размер поля	Ключевое поле	Маска ввода	Условие
Id_doc	Текстовый	5			
Id_pat	Текстовый	5			
datevisit	Дата/время	8		__.__.____г	
complaint	Поле МЕМО	4			
Для просмотра и редактирования данных достаточно отыскать нужную таблицу в окне БД и щелкнуть дважды по ней левой кнопкой мыши (рис. 2.8).
В результате появится окно для ввода и редактирования данных (рис. 2.9).
Для ввода и редактирования данных могут использоваться приемы, обычно применяемые при работе в программах для Windows. Нажатие на клавишу Tab или Enter приводит к перемещению курсора в следующее поле.
Для отображения данных модифицируемой таблицы необходимо:
1.	Открыть базу данных.
2.	Дважды щелкнуть по значку нужной таблицы.
 
Рис. 2.8.  Окно выбора таблиц БД
 		Рис. 2.9. Окно ввода и редактирования данных
Для заполнения таблицы БД необходимо:
1.	Открыть базу данных.
2.	Дважды щелкнуть по значку модифицируемой таблицы.
3.	В открывшемся окне найти пустую строку, выбрать поле с помощью мыши, используя клавишу Тав ввести значения.
4.	По завершении ввода закрыть окно таблицы. И подтвердить сохранение таблицы.
Для удаления записи в таблице необходимо:
1.	Открыть базу данных.
2.	Дважды щелкнуть по значку интересующей нас таблицы.
3.	В открывшемся окне, используя мышь, выделить нужную строчку и по нажатии правой кнопки мыши выбрать пункт Удалить запись.
4.	По завершении закрыть окно таблицы и подтвердить сохранение таблицы.
2.2.	Организация связей в СУБД Access
2.2.1. Создание первичных ключей и индексов
Каждая таблица должна содержать первичный ключ — одно или несколько полей, содержимое которых уникально для каждой записи. Например, поле ID_doc — это первичный ключ в таблице DoctorTab, т.е. каждая запись в этой таблице имеет свой уникальный номер врача. Наличие неповторяющегося первичного ключа в каждой записи (как поле ID_doc в таблице DoctorTab) позволяет рассматривать любые две запи-си обособленно. 
Первичные ключи создаются для гарантирования уникальности каждой записи. Создавая таблицы, Access всегда предлагает задать первичный ключ с типом данных Счетчик (AutoNumber). Значение такого поля будет автоматически увеличиваться на единицу при добав-лении новой записи. В Access для обеспечения целостности данных нельзя использовать в таблицах поля с типом данных Счетчик (AutoNumber). Поэтому для первичного ключа важно задать иной тип данных, например Текстовый или Числовой.
Так, для за¬полнения текстового поля идентификатора используется одно из правил генерации уникального значения. Правила могут очень простыми. Например, можно использовать конкатена¬цию некоего символьного выражения и порядкового номера (А001, А002; В001, В002 и т.д.), а также сложное выражение, вычисленное на основе информации из нескольких полей таблицы.
Обычно в базах данных есть несколько связанных таблиц. Связы-вая  таблицы,   следует  связывать   первичный  ключ   одной  таблицы   с полем такой же структуры и типа другой. Если поле связи во второй таблице не является первичным ключом (обычно так и бывает), его называют внешним ключом.
Поле первичного ключа в Access не только выполняет роль связующего поля между двумя таблицами, но и предоставляет другие преимущества.
•	Поле первичного ключа является индексом, который значительно ускоряет выполнение запросов, поиск и сортировку.
•	При вводе новых записей вы должны ввести значение в поле (или поля) первичного ключа; Access не позволит вам оставить это поле незаполненным и проследит, чтобы вы ввели только допустимые значения для текущей записи.
•	При добавлении новых записей Access проверяет, не дублируются ли поля первичного ключа, что обеспечивает целостность данных.
•	По умолчанию Access сортирует данные по первичному ключу.
Для создания первичного ключа нужно выделить нужное поле, щелк-нуть на кнопке Ключевое поле (Primary Key) панели инструментов. Если необходимо создать первичный ключ, состоящий из нескольких полей (составной первичный ключ), то следует выделить все эти поля (удерживая нажатой клавишу <Ctrl>) и щелкнуть на кнопке Ключевое поле (Primary Key). 
При определении составного первичного ключа важен порядок выбора полей. Поэтом следует проверить правильность порядка наз-начения ключевых полей с помощью диалогового окна Индексы (Indexes), вызываемого после щелчка на кнопке Индексы (Indexes) пане-ли инструментов. На рисунке 2.10 показан первичный ключ, состоящий из двух полей таблица VisitTab . 
Диалоговое окно Индексы (рис. 2.11) открывается (при  условии, что таблица открыта в режиме конструктора) с помощью выбора из главного меню Access команды Вид =>Индексы (View => Indexes) или щелчка на кнопке Индексы (Indexes) (кнопка с изображением серии параллельных линий и молнии, расположенная в середине панели ин-струментов, справа от кнопки Ключевое поле).
 
Рис.2.10. Создание первичного ключа
В окне Индексы отображены все индексы таблицы, включая первичный и внешние ключи, а также другие индексы, служащие для ускорения сортировки и поиска по определенным полям. Обратите 
 
Рис.2.11. Диалоговое окно Индексы 
внимание, что тип индекса PrimaryKey отображен только возле поля Id_doc, хотя графический символ отображается для обоих полей, составляющих первичный ключ.
Порядок расположения этих полей критичен, если вы измените его на обратный, сделав  поле Id_pat   первой частью первичного ключа, это приведет к некорректной работе — может сложиться ситуация, когда невозможно будет создать уникальную запись в таблице.
Если предполагается частое выполнение одновременной сортировки или поиска в нескольких полях, можно создать для этих полей составной индекс. Его создание осуществляется с помощью окна Индексы (см. рис. 2.11) . Для этого необходимо:
1.	Открыть таблицу в режиме Конструктора. 
2.	На панели инструментов нажать кнопку Индексы.
3.	В первой пустой строке поля Индекс ввести имя индекса. 
4.	В поле Имя поля нажать на стрелку и выбрать первое поле, для которого необходимо создать индекс. 
5.	В следующей строке поля Имя поля указать второе индексируемое поле. (Для данной строки поле Индекс должно оставаться пустым.) Повторить эту операцию для всех полей, которые необходимо включить в индекс. В индексе может быть использовано до 10 полей. 
По умолчанию устанавливается порядок сортировки По возрастанию. Для сортировки данных полей по убыванию в поле Порядок сортировки надо указать значение По убыванию. 
Диалоговое окно Индексы  используется также для просмотра, изменения и удаления существующих индексов. Изменить можно: 
•	название индекса в поле Индекс; 
•	поле таблицы, соответствующее данному индексу, выбрав новое поле из списка в поле Имя поля; 
•	порядок сортировки в поле Порядок сортировки; 
•	свойства данного индекса в нижней части окна (см. рис. 2.11): 
o	Ключевое поле определяет, является ли индексированное поле ключевым; 
o	Уникальный индекс определяет, должно ли быть каждое значение в этом поле уникальным; 
o	Пропуск пустых полей определяет, включаются или не включаются в индекс записи с пустым (Null) значением данного поля. 
Например, если в одном и том же запросе часто задаются условия для полей Имя врача и Фамилия врача, то для этих двух полей имеет смысл создать составной индекс.
При сортировке таблицы по составному индексу Microsoft Access сначала выполняет сортировку по первому полю, определенному для данного индекса. Если в первом поле содержатся записи с повторяющимися значениями, то выполняется сортировка по второму полю, определенному для данного индекса, и так далее.
2.2.2. Организация связей и поддержание целостности данных
Для пояснения возможных отношений между объектами БД обратимся к уже рассмотренной базе данных о врачах и пациентах. Таблица DoctorTab содержит информацию о врачах, таблица PatientTab - информация о пациентах. Связь между ними можно осуществить с помощью таблицы VisistTab (информация о посещении пациентами врачей). Например, вы можете получить информацию о том, кто и когда посещал какого-либо врача. Каждая запись в таблицах идентифицирует один объект группы (врач, пациент и прием). Отно-шение между объектами определяет отношение между таблицами. Предполагая, что один врач может принять несколько пациентов, а один пациент может посетить несколько врачей. Таким образом, между пациентом и его посещениями врача существует отношение один-ко-многим, такая же связь существует между врачом и его приемами. Связь таблиц осуществляется на основании данных в совпадающих полях ID_doc и ID_pat.
Access поддерживает четыре типа отношений между таблицами: один-к-одному, один-ко-многим, много-к-одному, много-ко-многим.
Связи на уровне таблиц можно создать с помощью окна Схема данных (Relationships). В случае необходимости связи между таблицами можно разорвать или изменить. Для обычного ввода данных и вывода отчетов связи на уровне таблиц очень удобны в использовании.
В Access 2002 встроено мощное средство установки связей. Оно позво-ляет добавлять таблицы, использовать метод перетащить и опустить для связи таблиц, легко определять тип связи  и устанавливать любые параметры целостности данных между таблицами.
Связи начинают устанавливать в окне базы данных. При акти-визированном окне базы данных, выберите команду Сервис => Схема данных (Tools => Relationships) или щелкните на кнопке Схема данных (Relationships) панели инструментов. При этом появится окно Схема данных (Relationships), которое позволяет добавлять таблицы и создавать связи между ними (рис. 2.12).
 
Рис. 2.12. Окно Схема данных
Обратите внимание, что с ним связана новая панель инструментов, которая имеет две кнопки, характерные для окна Схема данных — Отобразить прямые связи (Show Direct Relationships) и Отобразить все связи (Show All Relationships). Изначально окно Схема данных (Relationships) не содержит таблиц.
Добавлять таблицы в окно можно следующими способами:
•	Использованием диалогового окна Добавление таблицы (Show Table), которое открывается автоматически, если окно Схема данных (Relationships) для базы данных открывается впервые.
•	Нажатием кнопки Отобразить таблицу (Show Table) панели инструментов.
•	С помощью команды Связи => Добавить таблицу (Relationships => Show Table).
•	Находясь в окне Схема данных (Relationships), щелкните правой кнопкой мыши и выберите из контекстного меню команду Добавить таблицу (Show Table).
Для вызова окна Схема данных (Relationships) и добавления в него таблиц выполните следующие действия.
1.	Щелкните на кнопке Схема данных (Relationships) панели инструментов, и Access откроет диалоговое окно Добавление таблицы (Show Table).
2.	Выберите все таблицы (DoctorTab, VisitTab, PatTab).После этого
щелкните на кнопке Добавить (Add).
3.	Щелкните на кнопке Закрыть (Close) диалогового окна добавление таблицы (Show Table). Экран будет выглядеть так, как на рисунке 3. Каждая таблица представлена в окне Схема данных списком своих полей, в качестве заголовков  этих  списков   используются   имена таблиц. Никаких связей между таблицами нет, но теперь вы можете их установить.
После добавления нужного количества таблиц в окно Схема данных (Relationships) можно создать связи между таблицами. Для этого просто выберите общее поле в одной из таблиц и перетащите его в общее поле той таблицы, которую вы хотите связать с первой (рис. 2.13).
 
Рис.2.13. Отображение связей между таблицами в окне Схема данных
	Если вы ошиблись при выборе поля для связи, просто пере-местите символ поля в пустую область окна, где символ изменится на международный символ Нет -- 0. Как только отобразится этот символ, отпустите кнопку мыши, и процесс соз¬дания связи прекратится.
	Access автоматически определяет тип отношения в связи между двумя табли¬цами, основываясь на данных в записях этих таблиц. Тип отношения отобража¬ется в нижней части диалогового окна Изменение связей (рис. 2.14). 
Возможность поддержки целостности данных необходима, если наша система включает несколько связанных друг с другом таблиц. 
Из двух связанных таблиц одну обычно называют родительской, а другую – дочерней. Такую связь называют связью между родительскими и дочерними записями таблиц. Целостность данных 

 
Рис. 2.14. Окно Изменение связей
гарантирует отсутствие записей-сирот, то есть дочерней записи без родительской.
После установки связей и проверки таблиц и полей связи можно включить поддержку це¬лостности данных с помощью опции Обеспечение целостности данных (Enforce Referential Integrity) (см. рис. 2.14).
После установки флажка опции Обеспечение целостности дан-ных в диалоговом окне Изменение связей становятся доступными флажки опций каскадного удаления связанных записей и каскадного обновления связанных полей.
Вас, наверное, удивит, что после включения опции Обеспечение целостности данных при попытке щелкнуть на кнопке Создать (Create) (или кнопке ОК, если вы открыли окно изменения связей для изменения уже существующей связи) Access не позволяет закрыть диа¬логовое окно так, как обычно. Причина в том, что, пытаясь задать связь с обеспечением цело¬стности данных, вы нарушаете эту целостность.
2.3.	Контрольные вопросы
1.	Как создать новую БД в Microsoft Access?
2.	Какие типы данных используются для задания полей записи.
3.	Пояснить типы полей Текстовый, поле МЕМО, Числовой, Дата/время.
4.	Как задать полю определенный тип?
5.	Какие существуют режимы отображения содержимого таблиц БД?
6.	Как добавить новую запись в таблицу?
7.	Каким образом можно удалить запись?
8.	Как добавить, удалить, переместить поля в таблице?
9.	Как применить к записи маску ввода?
10. Как задаются Условия на значения?
    11. Для чего существует Формат ввода? Как его задать?
    12. Какие существуют стандартные форматы для данных Числового                     типа? Для Логического?
    13. Какие существуют стандартные форматы для данных типа Дата/время?
    14. Как в Accesse записываются логические Да и Нет?
    15. Что такое индекс? Для чего он используется в БД?
    16. Чем отличается простой индекс от составного?
    17. Как перейти в режим задания индексов для таблиц БД?
    18. Какие типы отношений существуют между таблицами в БД?
    19. Пояснить понятия родительской и дочерней таблицы.
    20. Какие преимущества использования первичного ключа?
    21. Как задается индексный ключ?
    22.Что называется внешним ключом?
    23. Как создаются связи между таблицами в конструкторе БД?
    24. Каков порядок модификации и удаления связей между таблицами?
    25. Как определяются правила поддержания целостности БД?
2.4.	Задания для самопроверки
1.	Задан формат ввода: (&&@)-@@@@-@. В каком виде будут отображаться следующие данные: а) 12345678; б) 175949;
в) 657448.
2.	Задайте маску ввода для телефона.
3.	Как задать условие, для поля Группа крови, если областью допустимых значений поля являются числа 1,2, 3 или 4?
4.	В БД из нескольких таблиц, установить отношения один-ко-многим между таблицами.
5.	В БД из нескольких таблиц, установить отношения между таблицами. Удалить установленное отношение.
6.	В БД из нескольких таблиц. установить отношения между таблицами. Определите условия ссылочной целостности.

7.	Создать таблицу БД, содержащую поля символьного, числового вида, а также типа Дата/время 2. 2. 2. 2. Создать составной индекс из символьного и числового поля.
8.	Создать таблицу БД, содержащую поля символьного, числового вида, а также типа Дата/время. 
9.	Создайте составной индекс из символьного поля и поля типа Дата/время.
10. Создать таблицу БД, содержащую поля символьного, числового вида, а также типа Дата/время. 
11.	 Создайте составной индекс из числового и поля типа Дата/время.
12.	  Создать БД из нескольких таблиц. Установить отношения один-к-одному между таблицами.
